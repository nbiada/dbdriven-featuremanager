@page "/"
@using DbDrivenFM.App.Services
@rendermode InteractiveServer

<PageTitle>DB Driven Feature Manager</PageTitle>


<div class="container-fluid p-4">

    <h1>DB Driven Feature Manager</h1>

    <p>This component demonstrates how to enable/disable feature flags using a database as backend.</p>
    <table class="table align-middle">
        <thead>
            <tr>
                <th>Feature</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (featureFlags != null)
            {
                @foreach (var feature in featureFlags.OrderBy(o => o.Name))
                {
                    <tr>
                        <td>@feature.Name</td>
                        <td>@((MarkupString)feature.Status())</td>
                        <td><button type="button" class="btn btn-outline-primary" 
                                    @onclick="() => ToggleFeature(feature.Id)">Toggle</button></td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] IFeaturesDataService FeaturesDataService { get; set; } = null!;

    private IReadOnlyCollection<FeatureFlag>? featureFlags;

    protected override async Task OnInitializedAsync()
    {
        featureFlags = await FeaturesDataService.GetFeatureFlagAsync();
    }

    private async Task ToggleFeature(int featureId)
    {
        await FeaturesDataService.Toggle(featureId);
        featureFlags = await FeaturesDataService.GetFeatureFlagAsync().ConfigureAwait(false);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: false);
    }

}

